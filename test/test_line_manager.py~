#!/usr/bin/env python

import unittest
import os
import shutil
import sys
PATH = os.path.split(os.path.realpath(__file__))[0]
sys.path.append('{}/..'.format(PATH))

from line_manager import LineManager, SubstitutionManager, Line
from spell_checker import StubSpellChecker, AspellSpellChecker
from test_helper import test_expected

class LineManagerTester(unittest.TestCase):
    def setUp(self):
        os.chdir('{}/test_line_manager'.format(PATH)) 
    
    def test_average(self):
        lm = LineManager(None)
        lm.load('avg_test')
        self.assertEqual(25, lm.average_length)

    def test_page_numbers(self):
        lm = LineManager(None)
        lm.load('avg_test')
        self.assertEqual(['1', '2', '3',], lm.page_numbers)

    def test_simple_substitutions(self):
        sm = SubstitutionManager(None)
        for test, expected in test_expected('simple_substitutions'):
            self.assertEqual(sm.update_single_characters(test), expected)        
    def test_word_substitutions(self):
        good_words = (u"'Jules", u'Jules', u'of', u'the', u'morning', u'immediate', u'government', u'won\'t',
                u'Who', u'who', u'flying', u'to', u'So', u'I\'d', u'on', u'flick',
                u'rid', u'Soccer', u'wordless', u'just-being',)
        stub_spell_checker = StubSpellChecker(good_words)
        sm = SubstitutionManager(stub_spell_checker)
        for test, expected in test_expected('word_fixes'):
            self.assertEqual(sm.update_words(test), expected)        

    def test_number_substitutions(self):
        good_words = ('looking', 'he', "won't", u'fly\u00E9ng', 'is', 'so', 'big', 'So', 'what')
        stub_spell_checker = StubSpellChecker(good_words)
        sm = SubstitutionManager(stub_spell_checker)
        for test, expected in test_expected('number_fixes'):
            self.assertEqual(sm.update_numbers(test), expected)        

    def test_last_word(self):
        for test, expected in test_expected('last_word'):
            line = Line(test, 1)
            self.assertEqual(line.last_word(), expected)
    def test_first_word(self):
        for test, expected in test_expected('first_word'):
            line = Line(test, 1)
            self.assertEqual(line.first_word(), expected)

    def test_pop_word(self):
        for test, expected in test_expected('pop_word'):
            line = Line(test, 1)
            line.pop_last_word()
            self.assertEqual(line.text, expected)
    def test_prepend_word(self):
        for test, expected in test_expected('prepend_word'):
            line = Line(test, 1)
            line.prepend_word('add')
            self.assertEqual(line.text, expected)
    def test_fix_hyphen(self):
        line_one = Line('the rains in sp-', 1)
        line_two = Line('ain fall', 2)
        sp = StubSpellChecker(('the', 'rains', 'in', 'spain', 'fall',))
        lm = LineManager(sp)
        lm.fix_hyphen((line_one, line_two))
        self.assertEqual('the rains in', line_one.text)
        self.assertEqual('spain fall', line_two.text)

    def test_fix_hyphens(self):
        sp = StubSpellChecker(('the', 'rains', 'in', 'spain', 'fall', 'spa-n',))
        lm = LineManager(sp)
        lm.load('hyphen_test')
        lm.remove_headers('THIS IS A TITLE')
        lm.fix_hyphens()

        page_one = ' '.join([line.text for line in lm.pages['1']])
        page_two = ' '.join([line.text for line in lm.pages['2'] if line.valid])
        self.assertEquals('the rains in spain fall spaen in spain the', page_one)
        self.assertEquals('rains fall', page_two)

if __name__ == '__main__':
    unittest.main()
